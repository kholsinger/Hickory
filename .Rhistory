fit <- f_stan(c(4, 32, 64))
pairs(fit)
source("f_estimate.R")
fit <- f_stan(c(4, 32, 64))
print(fit, digits_summary = 3)
fit <- f_stan(c(50, 0, 50))
print(fit, digits_summary = 3)
fit <- f_stan(c(90, 0, 10))
print(fit, digits_summary = 3)
fit <- f_stan(c(80, 20, 20))
print(fit, digits_summary = 3)
fit <- f_stan(c(80, 20, 0))
pairs(fit)
.2/(0.9*0.1)
p <- (2*80 + 20)/(2*100)
p
x <- c(80, 20, 0)/100
x
f <- 1 - x[2]/(2*p*(1-p))
f
print(fit, digits_summary = 3)
source("f_estimate.R")
fit <- f_stan(c(80, 20, 0))
fit <- f_stan(c(80, 20, 0))
source("f_estimate.R")
fit <- f_stan(c(80, 20, 0))
fit <- f_stan(c(80, 20, 0))
fit <- f_stan(c(80, 20, 0))
source("f_estimate.R")
fit <- f_stan(c(80, 20, 0))
fit <- f_stan(c(80, 20, 0))
source("f_estimate.R")
fit <- f_stan(c(80, 20, 0))
fit <- f_stan(c(80, 20, 0))
print(fit, digits_summary = 3)
install.packages("adegenet")
library(adegenet)
help("adegenet")
nancycats
data("nancycats")
nancycats
tmp <-genind2df(nancycats)
tmp <-genind2genpop(nancycats)
tmp <-genind2df(nancycats)
tmp <-genind2genpop(nancycats)
library(tidyverse)
dat <- read_csv("protea_repens.csv")
head(dat)
sub("2", "1", dat$TP243)[1:5]
dom <- dat
for (i in 2:ncol(dom)) {
dom[ ,i] <- sub("2", "1", dom[ ,i])
}
head(dom)
dom <- dat
loci <- colnames(dom)[-1]
loci
for (locus in loci) {
dom[[locus]] <- sub("2", "1", dom[[locus]])
}
head(dom)
write_csv(dom, path = "dominant_example.csv")
tmp <- read_marker_data("dominant_example.csv")
source("read_data.R")
tmp <- read_marker_data("dominant_example.csv")
tmp <- read_marker_data("dominant_example.csv")
source("read_data.R")
tmp <- read_marker_data("dominant_example.csv")
source("read_data.R")
tmp <- read_marker_data("dominant_example.csv", dominant = TRUE)
source("read_data.R")
tmp <- read_marker_data("dominant_example.csv", dominant = TRUE)
tmp
rm(list=ls())
source("read_data.R")
source("analyze.R")
rm(list=ls())
source("read_data.R")
source("analyze.R")
source("analyze.R")
genos <- read_marker_data("protea_repens.csv")
fit <- analyze_codominant(genos)
genos <- read_marker_data("dominant_example.csv")
fit <- analyze_dominant(genos)
source("analyze.R")
fit <- analyze_dominant(genos)
genos
source("analyze.R")
fit <- analyze_dominant(genos)
dims(genos$n)
dim(genos$n)
source("analyze.R")
fit <- analyze_dominant(genos)
source("diagnose_ess.R")
diagnose_bulk_ess(fit)
source("analyze.R")
source("analyze.R")
source("analyze.R")
source("analyze.R")
fit <- analyze_dominant(genos)
source("analyze.R")
fit <- analyze_dominant(genos)
fit <- analyze_dominant(genos)
launch_shinystan(fit)
library(shinystan)
launch_shinystan(fit)
theta <- seq(0.001, 0.009, by = 0.001)
y <- dbeta(theta, 1, 2)
plot(x, y, typ = "l")
help("plot")
plot(x, y, type = "l")
plot(theta, y, type = "l")
theta <- seq(0.001, 0.999, by = 0.001)
y <- dbeta(theta, 1, 2)
plot(theta, y, type = "l")
source("analyze.R")
source("analyze.R")
fit <- analyze_dominant(genos)
launch_shinystan(fit)
fit <- analyze_dominant(genos, prior_theta = c(3,1))
fit <- analyze_dominant(genos, prior_theta = c(1,1))
fit <- analyze_dominant(genos, prior_theta = c(2,4))
fit <- analyze_dominant(genos, prior_theta = c(2,4), iter = 10000, thin = 5)
expression(f)
expression(beta)
plot(fit)
mcmc_intervals(fit, pars = c("f", "theta"))
help("mcmc_intervals")
mcmc_intervals(fit, pars = c("f", "theta")) + scale_y_discrete(labels = c("f", expression(theta)))
mcmc_intervals(fit, pars = c("f", "theta"))
help("scale_y_discrete")
mcmc_intervals(fit, pars = c("f", "theta"), labels = c("f", expression(theta))
)
help("labs")
help("yaxis_text")
mcmc_intervals(fit, pars = c("f", "theta")) + xaxis_ticks(labels = c("f", expression(theta)))
mcmc_intervals(fit, pars = c("f", "theta")) + xaxis_ticks(label = c("f", expression(theta)))
mcmc_intervals(fit, pars = c("f", "theta")) + xaxis_ticks(element_text = c("f", expression(theta)))
suppressWarnings(mcmc_intervals(fit, pars = c("f", "theta")) + scale_y_discrete(labels = c("f", expression(theta))))
sink(type = "message")
mcmc_intervals(fit, pars = c("f", "theta")) + scale_y_discrete(labels = c("f", expression(theta)))
sink(type = "output")
sink.number()
sink("message.txt", type = message)
sink(file = "message.txt", type = message)
sink_file <- file("message.txt")
sink(sink_file, type = "message")
sink_file <- file("message.txt", open = "wt")
sink(sink_file, type = "message")
mcmc_intervals(fit, pars = c("f", "theta")) + scale_y_discrete(labels = c("f", expression(theta)))
sink()
unlink("message.txt")
mcmc_intervals(fit, pars = c("f", "theta")) + scale_y_discrete(labels = c("f", expression(theta))) + yaxis_text(size = 12)
mcmc_intervals(fit, pars = c("f", "theta")) + scale_y_discrete(labels = c("f", expression(theta))) + yaxis_text(size = 16)
mcmc_intervals(fit, pars = c("f", "theta")) + scale_y_discrete(labels = c("f", expression(theta))) + yaxis_text(size = 16) + xaxis_text(size = 16)
mcmc_intervals(fit, pars = c("f", "theta")) + scale_y_discrete(labels = c("f", expression(theta))) + yaxis_text(size = 16, family = "sans") + xaxis_text(size = 16, family = "sans")
sink()
sink()
sink()
sink.number()
sink()
unlink("message.txt")
source("analyze.R")
logit_prior(list(mean = 0.1, upper = 0.2))
tmp <- logit_prior(list(mean = 0.1, upper = 0.2))
exp(tmp[1])/(1+exp(tmp[1]))
exp(tmp[2])/(1+exp(tmp[2]))
logit(upper)
logit(0.2)
logit(0.2) - logit(0.1)
source("analyze.R")
tmp <- logit_prior(list(mean = 0.1, upper = 0.2))
tmp
exp(tmp[1])/(1+exp(tmp[1]))
exp(tmp[2])/(1+exp(tmp[2]))
source("analyze.R")
tmp <- logit_prior(list(mean = 0.1, upper = 0.2))
tmp
source("analyze.R")
tmp <- logit_prior(list(mean = 0.1, upper = 0.2))
tmp
exp(tmp[1] + 2*tmp[2])/(1 + exp(tmp[1] + 2*tmp[2]))
logit_theta <- rnorm(10000, tmp[1], tmp[2])
theta <- exp(logit_theta)/(1 + logit_theta)
plot(density(theta))
min(theta)
theta <- exp(logit_theta)/(1 + exp(logit_theta))
min(theta)
max(theta)
plot(density(theta))
alpha <- (1-theta)/theta
plot(density(alpha))
mean(alpha)
sd(alpha)
help(rgamma)
var(alpha)
var(alpha)/mean(alpha)
s <- sqrt(var(alpha)/mean(alpha))
a <- mean(alpha)/s
mean(alpha)
a*s
var(alpha)
a*s^2
a*(s^2)
s
s^2
s <- var(alpha)/mean(alpha)
a <- mean(alpha)/s
mean(alpha)
a
s
s*a
var(alpha)
a*s^2
tmp_gamma <- rgamma(10000, shape = a, scale = s)
plot(density(tmp_gamma))
lines(denstiy(tmp), col = "red")
log_alpha <- log(alpha)
plot(density(log_alpha))
mean(log_alpha)
sd(log_alpha)
tmp_lognorm <- rnorm(10000, mean = mean(log_alpha), sd = sd(log_alpha))
plot(density(tmp_lognorm))
theta <- function(alpha) return(1/(1+alpha))
alpha <- function(theta) return((1-theta)/theta)
alpha(1/3)
theta(2)
alpha(1/4)
theta(3)
logit_prior(0.1, 0.2)
sink()
sink()
source("analyze.R")
logit_prior(list(mean = 0.1, upper = 0.2))
theta <- exp(-2.1972246)/(1 + exp(-2.1972246))
theta
(1-theta)/theta
theta <- exp(-2.1972246 + 2*0.4054651)/(1 + exp(-2.1972246 + 2*0.4054651))
theta
(1-theta)/theta
convert <- function(logit_prior) {
theta_mu <- exp(logit_prior[1])/(1 + logit_prior[1])
theta_hi <- exp(logit_prior[1] + 2*logit_prior[2])/(1 + exp(logit_prior[1] + logit_prior[2]))
mean <- log(theta_mu)
sd <- (log(theta_hi) - log(theta_mu))/2.0
return(c(mean, sd))
}
convert(logit_prior(list(mean = 0.1, upper = 0.2)))
logit_prior(list(mean = 0.1, upper = 0.2))
convert(-2, 0.4)
convert(c(-2, 0.4))
convert <- fix()
convert <- function(logit_prior) {
theta_mu <- exp(logit_prior[1])/(1 + exp(logit_prior[1]))
theta_hi <- exp(logit_prior[1] + 2*logit_prior[2])/(1 + exp(logit_prior[1] + logit_prior[2]))
mean <- log(theta_mu)
sd <- (log(theta_hi) - log(theta_mu))/2.0
return(c(mean, sd))
}
convert(logit_prior(list(mean = 0.1, upper = 0.2)))
convert <- function(logit_prior) {
theta_mu <- exp(logit_prior[1])/(1 + logit_prior[1])
theta_hi <- exp(logit_prior[1] + 2*logit_prior[2])/(1 + exp(logit_prior[1] + logit_prior[2]))
mean <- log((1-theta_mu)/theta_mu)
hi <- log((1-theta_hi)/theta_hi)
sd <- (hi - mean)/2.0
return(c(mean, sd))
}
convert(logit_prior(list(mean = 0.1, upper = 0.2)))
convert <- function(logit_prior) {
theta_mu <- exp(logit_prior[1])/(1 + exp(logit_prior[1]))
theta_hi <- exp(logit_prior[1] + 2*logit_prior[2])/(1 + exp(logit_prior[1] + logit_prior[2]))
mean <- log((1-theta_mu)/theta_mu)
hi <- log((1-theta_hi)/theta_hi)
sd <- (hi - mean)/2.0
return(c(mean, sd))
}
convert(logit_prior(list(mean = 0.1, upper = 0.2)))
tmp <- logit_prior(list(mean = 0.1, upper = 0.2))
r_logit_theta <- rnorm(10000, mean = tmp[1], sd = tmp[2])
mean(r_logit_theta)
sd(r_logit_theta)
exp(-2.197993 + 2*0.404482)/(1 + exp(-2.197993 + 2*0.404482))
convert(tmp)
tmp_alpha <- convert(tmp)
r_log_alpha <- rnorm(10000, mean = tmp_alpha[1], sd = tmp_alpha[2])
convert <- function(logit_prior) {
theta_mu <- exp(logit_prior[1])/(1 + exp(logit_prior[1]))
theta_hi <- exp(logit_prior[1] + 2*logit_prior[2])/(1 + exp(logit_prior[1] + logit_prior[2]))
mean <- log((1-theta_mu)/theta_mu)
hi <- log((1-theta_hi)/theta_hi)
sd <- (mean - hi)/2.0
return(c(mean, sd))
}
convert(logit_prior(list(mean = 0.1, upper = 0.2)))
tmp_alpha <- convert(tmp)
r_log_alpha <- rnorm(10000, mean = tmp_alpha[1], sd = tmp_alpha[2])
mean(r_log_alpha)
sd(tmp_alpha)
mean(r_log_alpha)
sd(r_log_alpha)
invlogit <- function(x) return(exp(x)/(1 + exp(x)))
r_theta <- invlogit(r_logit_theta)
r_alpha <- exp(r_log_alpha)
r_theta_alpha <- (1/(1+r_alpha))
library(ggplot2)
library(tidyverse)
for_plot <- tibble(Source = c(rep("Theta", length(r_theta)), rep("Alpha", length(r_theta_alpha))),)
for_plot <- tibble(Source = c(rep("Theta", length(r_theta)), rep("Alpha", length(r_theta_alpha))),
Theta = c(r_theta, r_theta_alpha))
p <- ggplot(for_plot, aes(x = Theta), color = Source) + geom_line(stat = "density")
print(p)
p <- ggplot(for_plot, aes(x = Theta, color = Source)) + geom_line(stat = "density")
print(p)
convert
source("read_data.R")
source("analyze.R")
rm(list=ls())
source("read_data.R")
source("analyze.R")
genos <- read_marker_data("dominant_example.csv")
fit <- analyze_dominant(genos)
fit <- analyze_dominant(genos)
library(shinystan)
launch_shinystan(fit)
fit <- analyze_dominant(genos)
source("analyze.R")
fit <- analyze_dominant(genos)
genos <- read_marker_data("protea_repens.csv")
source("analyze.R")
fit <- analyze_codominant(genos)
fit <- analyze_codominant(genos)
genos <- read_marker_data("dominant_example.csv")
fit <- analyze_dominant(genos)
fit <- analyze_dominant(genos, chains = 1, iter = 200)
fit <- analyze_dominant(genos, chains = 1, iter = 200)
fit <- analyze_dominant(genos, chains = 1)
help("stan")
sink()
sink()
sink()
sink()
sink()
sink()
library(rstan)
help(stan)
source("read_data.R")
source("analyze.R")
genos <- read_marker_data("dominant_example.csv")
fit <- analyze_dominant(genos)
fit <- analyze_dominant(genos)
fit <- analyze_dominant(genos, chains = 1, iter = 200)
fit <- analyze_dominant(genos, chains = 1, iter = 200)
fit <- analyze_dominant(genos, chains = 1, iter = 200)
fit <- analyze_dominant(genos)
source("read_data.R")
source("analyze.R")
genos <- read_marker_data("protea_repens.csv")
fit <- analyze_codominant(genos)
plot(fit, pars = c("f", "theta")) + scale_y_discrete(labels = c("f", expression(theta)))
suppressMessages(plot(fit, pars = c("f", "theta")) + scale_y_discrete(labels = c("f", expression(theta))))
p <- mcmc_intervals(fit, pars = c("f", "theta")) +
scale_y_discrete(labels = c("f", expression(theta))) +
xaxis_text(size = 16, family = "sans") +
yaxis_text(size = 16, family = "sans")
suppressMessages(p <- mcmc_intervals(fit, pars = c("f", "theta")) +
scale_y_discrete(labels = c("f", expression(theta))) +
xaxis_text(size = 16, family = "sans") +
yaxis_text(size = 16, family = "sans"))
p
source("analyze.R")
fit <- analyze_codominant(genos)
print(fit, digits_summary = 3)
print(fit, digits_summary = 3, pars = c("f", "theta", "lp_"))
print(fit, digits_summary = 3, pars = c("f", "theta", "lp__"))
source("analyze.R")
fit <- analyze_codominant(genos)
help("stan")
source("analyze.R")
fit <- analyze_codominant(genos)
source("analyze.R")
fit <- analyze_codominant(genos)
prior_f
prior_pi
initialize_chains()
source("analyze.R")
initialize_chains()
set_priors(prior_pi, prior_f, prior_theta, genos$N_loci)
initialize_chains()
source("analyze.R")
fit <- analyze_codominant(genos)
source("analyze.R")
genos <- read_marker_data("dominant_example.csv")
fit <- analyze_dominant(genos)
warnings()
fit <- analyze_dominant(genos, iter = 10000)
warnings()
source("analyze.R")
fit <- analyze_dominant(genos)
library(shinystan)
launch_shinystan(fit)
help("stanfit")
mcmc_nuts_energy(fit)
np <- nuts_params(fit)
help(nuts_params)
mcmc_nuts_energy(np)
post <- as.array(fit)
post_theta <- post[ , , "theta"]
Iteration <- seq(1, nrow(post_theta))
Parameter <- rep("theta", nrow(post_theta))
Value <- post_theta[, 1]
Chain <- rep(1, nrow(post_theta))
Iteration <- c(Iteration, seq(1, nrow(post_theta)))
Parameter <- c(Parameter, rep("theta", nrow(post_theta)))
Value <- c(Value, post_theta[, 2])
Chain <- rep(2, nrow(post_theta))
Chain <- rep(1, nrow(post_theta))
Chain <- c(Chain, rep(1, nrow(post_theta)))
Iteration <- c(Iteration, seq(1, nrow(post_theta)))
Parameter <- c(Parameter, rep("theta", nrow(post_theta)))
Value <- c(Value, post_theta[, 3])
Chain <- c(Chain, rep(2, nrow(post_theta)))
Chain[1001:2000] <- rep(2, nrow(post_theta))
Chain[2001:3000] <- rep(3, nrow(post_theta))
Iteration <- c(Iteration, seq(1, nrow(post_theta)))
Parameter <- c(Parameter, rep("theta", nrow(post_theta)))
Value <- c(Value, post_theta[, 4])
Chain <- c(Chain, rep(4, nrow(post_theta)))
energy <- tibble(Iteration = c(np$Iteration, Iteration),
Parameter = c(np$Parameter, Parameter),
Value = c(np$Value, Value),
Chain = c(np$Chain, Chain))
unique()
unique(energy$Parameter)
unique(as.character(energy$Parameter))
help("mcmc_nuts_energy")
mcmc_pairs(fit, pars = c("f", "theta"), np = np)
mcmc_pairs(fit, pars = c("f", "theta", "energy__"), np = np)
mcmc_pairs(fit, pars = c("f", "theta", "lp__"), np = np)
install.packages("GGaly")
pairs_stan <- function(chain, stan_model, pars) {
energy <- as.matrix(sapply(get_sampler_params(stan_model, inc_warmup = F),
function(x) x[,"energy__"]))
pars <- extract(stan_model, pars = pars, permuted = F)
df <- data.frame(energy[,chain], pars[,chain,])
names(df)[1] <- "energy"
GGally::ggpairs(df, title = paste0("Chain", chain),
lower = list(continuous = GGally::wrap("points", alpha = 0.2)))
}
pairs_stan(1, fit, c("f","theta"))
pairs_stan <- fit(pairs_stan)
pairs_stan <- fix(pairs_stan)
tmp <- pairs_stan(1, fit, c("f", "theta"))
str(tmp)
pairs_stan <- fix(pairs_stan)
tmp <- pairs_stan(1, fit, c("f", "theta"))
tmp
pairs_stan <- fix(pairs_stan)
tmp <- pairs_stan(1, fit, c("f", "theta"))
pairs_stan <- fix(pairs_stan)
tmp <- pairs_stan(1, fit, c("f", "theta"))
pairs_stan <- fix(pairs_stan)
tmp <- pairs_stan(1, fit, c("f", "theta"))
pairs_stan <- fix(pairs_stan)
pairs_stan <- fix(pairs_stan)
tmp <- extract(fit, pars = pars, permuted = F)
tmp <- extract(fit, pars = c("f", "theta"), permuted = F)
str(tmp)
pairs_stan <- fix(pairs_stan)
tmp <- pairs_stan(1, fit, c("f", "theta"))
print(tmp)
pairs_stan <- fix(pairs_stan)
tmp <- extract(fit, pars = c("f", "theta"), permuted = F)
names(tmp)[3]
names(tmp)
dimnames(tmp)
dimnames(tmp)[3][1]
dimnames(tmp)[3][2]
dimnames(tmp)[3]
str(dimnames(tmp)[3])
dimnames(tmp)$parameters[1]
dimnames(tmp)$parameters[2]
pairs_stan <- fix(pairs_stan)
tmp <- pairs_stan(1, fit, c("f", "theta"))
tmp
pairs_stan <- fix(pairs_stan)
tmp <- pairs_stan(1, fit, c("f", "theta"))
tmp
pairs_stan <- fix(pairs_stan)
rm(list = ls())
source("read_data.R")
source("analyze.R")
genos <- read_marker_data("protea_repens.csv")
fit <- analyze_codominant(genos)
genos <- read_marker_data("dominant_example.csv")
fit <- analyze_dominant(genos)
source("diagnose_ess.R")
for (i in 1:4) pairs_stan(i, fit, c("f", "theta"))
source("diagnose_ess.R")
for (i in 1:4) pairs_stan(i, fit, c("f", "theta"))
source("diagnose_ess.R")
source("diagnose_ess.R")
for (i in 1:4) pairs_stan(i, fit, c("f", "theta"))
fit <- analyze_dominant(genos, iter = 25000, thin = 25)
fit <- analyze_dominant(genos, iter = 25000, control = list(max_treedepth = 14))
source('diagnose.R')
stan_pairs(fit, pars = c("f", "theta", "lp__"))
pairs_stan(fit, pars = c("f", "theta", "lp__"))
pairs_stan()
pairs_stan
pairs_stan(1, fit, pars = c("f", "theta", "lp__"))
fit <- analyze_dominant(genos, control = list(max_treedepth = 14))
